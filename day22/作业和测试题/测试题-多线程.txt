一、试写出多线程的两种创建方式和启动方式
	1. 继承Thread
		a.  新建一个类
		b. 继承Thread类
		c. 重写run方法
		d. 启动方式
			① 创建线程对象(新生线程)  调用到Thread类的构造器(init方法)
			② start方法启动线程(就绪状态)
	2. 实现Runnable接口
		a. 新建一个类
		b. 实现Runnable接口
		c. 实现run方法
		d. 启动
			① 准备一个目标资源	
			② Thread类去封装目标  
			③ start启动

二、简述start()方法和run()方法！  
	start()    用于启动一个线程,让当前线程进入到就绪状态
		一个线程的start方法只能调用一次(在调用的时候有一个状态的判断)
		if (threadStatus != 0)
           			 throw new IllegalThreadStateException();
		启动之后，发生阻塞(睡眠，插队...),死亡再次调用start方法都会报错  (生命周期的讲解)
	run()     功能：设置当前线程执行的内容，run方法只是一个普通的方法
		自己调用run方法，就相当于是一个普通方法的调用
		当线程抢到cpu的时间片，由jvm去调用当前线程的run方法
	
三、简述一下线程优先级的相关知识
	java中的线程调度是抢占式，就存在优先级
	线程的优先级 [1-10]    设置优先级的时候会判断参数的范围
	Thread类给我们提供了三个常量    min(1)   no(5)  max(10)
	Thread类提供了两个方法   set(int num)  int  get()
	线程的优先级在创建线程的时候，会采用父级线程的优先级，后来是可以改变子线程的优先级

	问题：创建的时候可以直接设置优先级么？创建后在设置

四、采用匿名内部类创建一个线程并启动起来(执行内容是打印10个随机数)
	//匿名内部类的使用是一次性的
	new Thread(){
		public void run(){
			for(){}
		}
	}.start();

	new Thread(new Runnable(){
		public void run(){
			for(){}
		}
	}).start();

取款，两个储户(两个储户的操作是完全一样的)

	






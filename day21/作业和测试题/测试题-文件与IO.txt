1. 简述字符流中close()和flush()的区别！	
	flush()   刷新   将缓存中的数据应用到文件内   流对象依然是可以使用

	close()  关闭   先刷新，释放流的资源    流对象就无法在使用

2.使用字符缓冲流完成一个文本文件复制(使用上字符缓冲流的新方法:readLine())
	//1. 流对象的创建
	BufferedReader in=new BufferedReader(new FileReader("d:/iotest/mysql.txt"));
	BufferedWriter out=new BufferedWriter(new FileWriter("d:/testIO/mysql.txt"));
	//2. 读写操作
	String str=null;
	while((str=in.readLine())!=null){
		out.write(str);
		out.newLine()；//有必要(如果采用read())
	}
	//3. 资源释放
	in.close();
	out.close();

	复制操作的时候，输入流和输出流指向同一个文件，是不是就清空了？是的(因为在输出流创建时文件内容就被清空了)
	
3. 简述序列化和反序列化的概念！
	序列化：   程序中的对象  -->   字节序列(.txt)
	反序列化：  字节序列   -->   程序中的对象

4. 已知一个文件java.txt,内容如下，统计出每个单词出现的个数！(空格隔开的就认为是一个单词)
	
songsong feige
jiao tongxue
zhangsan lisi
xue java mysql java java

//1. 创建一个输入流(读文件)   字符缓冲输入流(readLine())   String
	BufferedReader in=new BufferedReader(new FileReader("d:/iotest/java.txt"));
//计算得到的结果怎么存储
	Map<String,Integer> map=new HashMap<>(); 
//2. 将文件中的数据全读出
	String line=null;
	while((line=in.readLine())!=null){//没循环一次就会得到一行数据
		String[] words=line.spilt(" ");
		//每个单词出现了多少次，拿出一个单词将作为key值去map中查找
		for(String word:words){
			Integer num=map.get(word);
			//1. 查到了 (说明之前是出现过此单词)
			//2. 查不到(说明之前没有出现过次单词)
			if(num==null){
				//没有查到  word单词是第一次出现
				num=1;
			}else{
				//找到了，word不是第一次出现，取出其次数自增1
				num++;
			}
			map.put(word,num);
		}
	}
//3. 资源的关闭
in.close();


	
	

	
	
	
	
	
	
	
	
	
	
	